%{

open Ast

%}

// The start token becomes a parser function in the compiled code:
%start start

// These are the terminal tokens of the grammar along with the types of
// the data carried by each token:
%token <System.Int32> INT
%token <System.String> STRING
%token <System.String> ID
%token PLUS MINUS ASTER	SLASH EQ NOTEQ LT LTE GTE GT AND OR
%token LPAREN RPAREN LCURLY RCURLY LBRACKET RBRACKET COMMA SEMICOLON COLON QUOTE ASSIGN DOT
%token ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF BREAK NIL FUNCTION VAR TYPE IMPORT PRIMITIVE
%token EOF

%left ASSIGN
%left AND OR
%left EQ NOTEQ LT LTE GTE GT
%left PLUS MINUS
%left ASTER SLASH

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type <Program> start

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  In this case the actions 
// produce data using F# data construction terms.
start: Program { Program($1) }

Program: Expr EOF { printfn "Program -> Expr"; $1 }

Expr:
	// binary operators
	| Term PLUS Expr					{ printfn "Expr -> Term + Expr"; Plus  ($1, $3) }
	| Term MINUS Expr					{ printfn "Expr -> Term - Expr"; Minus ($1, $3) }
	| Term AND Expr						{ printfn "Expr -> Term & Expr"; And ($1, $3) }
	| Term OR Expr						{ printfn "Expr -> Term | Expr"; Or ($1, $3) }
	| Term EQ Expr						{ printfn "Expr -> Term = Expr"; Equals ($1, $3) }
	| Term NOTEQ Expr					{ printfn "Expr -> Term <> Expr";NotEquals ($1, $3) }
	| Term GT Expr						{ printfn "Expr -> Term > Expr"; GreaterThan ($1, $3) }
	| Term GTE Expr						{ printfn "Expr -> Term >= Expr"; GreaterThanEqual ($1, $3) }
	| Term LT Expr						{ printfn "Expr -> Term < Expr"; LessThan ($1, $3) }
	| Term LTE Expr						{ printfn "Expr -> Term <= Expr"; LessThanEqual ($1, $3) }
	| Term								{ printfn "Expr -> Term"; Term ($1) }
	
	// declarations 
	| ArrayDecl							{ printfn "Expr -> ArrayDecl"; $1 }
	| RecordDecl						{ printfn "Expr -> RecordDecl"; $1 }
	| Assignment						{ printfn "Expr -> Assignment"; $1 }
	| FunctionCall						{ printfn "Expr -> FunctionCall"; $1 }
	| LPAREN ExprSequence RPAREN		{ printfn "Expr -> ExprSeq"; ExprSeq ($2) }
	| Conditional						{ printfn "Expr -> Conditional"; $1 }
	| Loop								{ printfn "Expr -> Loop"; $1 }
	| BREAK								{ printfn "Expr -> break"; Break }
	| LetDecl							{ printfn "Expr -> LetDecl"; $1 }

Term:
	| Factor							{ printfn "Term -> Factor"; Factor  ($1) }
	| Factor ASTER Term					{ printfn "Term -> Factor * Term"; Multiply ($1, $3) }
	| Factor SLASH Term					{ printfn "Term -> Factor / Term"; Divide ($1, $3) }

Factor:
	| Value								{ printfn "Factor ->  Value";  Value ($1)  }
	| MINUS Value						{ printfn "Factor -> -Value"; NegativeValue ($2) }

Value:
	| INT								{ printfn "Value -> INT (%A)" $1; Integer($1) }
	| STRING							{ printfn "Value -> STRING"; Str($1) }
	| NIL								{ printfn "Value -> NIL"; Nil }
    | Id								{ printfn "Value -> Id"; Id ($1) }
	| LPAREN Expr RPAREN				{ printfn "Value -> ( Expr )"; ParenExp($2) }
	| LValue							{ printfn "Value -> LValue"; LValue ($1) }

ArrayDecl : 
	| Id LBRACKET Expr RBRACKET OF Expr { printfn "ArrayDecl -> Id [Expr] of Expr "; Array ($1, $3, $6) }

RecordDecl :
	| Id LCURLY FieldList RCURLY	{ printfn "RecordDecl -> Id {FieldList}"; Record ($1, $3) }	

FieldList:
	| FieldAssignment						{ [$1] }
	| FieldAssignment COMMA FieldList	{$1 :: $3 }

FieldAssignment:
	| Id EQ Expr { FieldAssignment ($1,$3) }

Assignment:
	| LValue ASSIGN Expr				{ printfn "Assignment -> LValue := Expr "; Assign ($1, $3) }

LValue : 
	| Id								{ printfn "LValue -> Id"; LValueId($1) }
	| Id LBRACKET Expr RBRACKET			{ printfn "LValue -> Id[Expr]"; ArrayAccess (LValueId($1), $3) }
	| LValue DOT Id						{ printfn "LValue -> LValue.Id"; MemberAccess ($1, $3) }
	| LValue LBRACKET Expr RBRACKET		{ printfn "LValue -> LValue[Expr]"; ArrayAccess ($1, $3) }

FunctionCall :
	| Id LPAREN ExprList RPAREN			{ printfn "FunctionCall -> Id (ExprList)";FunctionCall ($1, $3) }

ExprList :
	|									{ printfn "ExprList -> <epsilon>"; [] }
	| Expr								{ printfn "ExprSequence -> Expr"; [$1] }
	| Expr COMMA ExprList				{ printfn "ExprSequence -> Expr, ExprList"; $1 :: $3 }

ExprSequence :
	|									{ printfn "ExprSequence -> <epsilon>"; [] }
	| Expr								{ printfn "ExprSequence -> Expr"; [$1] }
	| Expr SEMICOLON ExprSequence		{ printfn "ExprSequence -> Expr; ExprSequence"; $1 :: $3 }

Conditional :
	| IF Expr THEN Expr					{ printfn "Conditional -> IF Expr THEN Expr"; Conditional ($2, $4, None) }
	| IF Expr THEN Expr	ELSE Expr		{ printfn "Conditional -> IF Expr THEN Expr ELSE Expr";Conditional ($2, $4, Some($6)) }

Loop :
	| WHILE Expr DO Expr				 { printfn "Loop -> WHILE Expr DO Expr"; While ($2, $4) }
	| FOR Id ASSIGN Expr TO Expr DO Expr { printfn "Loop -> FOR Id := Expr TO Expr DO Expr"; For ($2, $4, $6, $8) } 

LetDecl :
	| LET DeclList IN ExprSequence END	 { printfn "LetDecl -> LET DeclList IN ExprSequence END"; Let ($2, $4) }

DeclList :
	| Decl								 { printfn "DeclList -> Decl"; [$1] }
	| Decl DeclList						 { printfn "DeclList -> Decl DeclList"; $1 :: $2 }

Decl :
	| TypeDecl							 { printfn "Decl -> TypeDecl"; $1 }
	| VarDecl							 { printfn "Decl -> VarDecl"; $1 }
	| FuncDecl							 { printfn "Decl -> FuncDecl"; $1 }

TypeDecl:
	| TYPE Id EQ TypeDef				 { printfn "TypeDecl -> TYPE Id EQ TypeDef"; TypeDeclaration ($2, $4) }

TypeDef :
	| Id								 { printfn "TypeDef -> Id"; TypeIdDef ($1) }
	| LCURLY TypeFields RCURLY			 { printfn "TypeDef -> { TypeFields }"; TypeFieldsDef (Some($2)) }
	| LCURLY RCURLY						 { printfn "TypeDef -> {}"; TypeFieldsDef (None) }
	| ARRAY OF Id						 { printfn "TypeDef -> ARRAY OF Id"; ArrayTypeDef ($3) }

TypeFields :
	| TypeField							 { printfn "TypeFields -> TypeField"; [$1]  }
	| TypeField COMMA TypeFields		 { printfn "TypeFields -> TypeField, TypeFields"; $1::$3 }

TypeField : 
	| Id COLON Id						 { printfn "TypeField -> Id : Id"; TypeField ($1, $3) }	

VarDecl :
	| VAR Id ASSIGN Expr				 { printfn "VarDecl -> VAR Id ASSIGN Expr"; VarDeclaration ($2, None, $4) }
	| VAR Id SEMICOLON Id ASSIGN Expr	 { printfn "VarDecl -> VAR Id : Id ASSIGN Expr"; VarDeclaration ($2, Some($4), $6) }

FuncDecl :
	
	| FUNCTION Id LPAREN TypeFields RPAREN EQ Expr 
		{ printfn "FunDecl -> FUNCTION Id LPAREN TypeFields RPAREN = Expr"; FuncDeclaration ($2, Some($4), None, $7 ) } 
	
	| FUNCTION Id LPAREN RPAREN EQ Expr 
		{ printfn "FunDecl -> FUNCTION Id LPAREN RPAREN = Expr"; FuncDeclaration ($2, None, None, $6 ) } 
	
	| FUNCTION Id LPAREN TypeFields RPAREN COLON Id EQ Expr 
		{ printfn "FunDecl -> FUNCTION Id LPAREN TypeFields RPAREN : Id = Expr"; FuncDeclaration ($2, Some($4), Some($7), $9 ) } 
	
	| FUNCTION Id LPAREN RPAREN COLON Id EQ Expr 
		{ printfn "FunDecl -> FUNCTION Id LPAREN RPAREN : Id = Expr"; FuncDeclaration ($2, None, Some($6), $8 ) } 

Id :
	| ID { printfn "Id -> ID(%A)" $1; Identifier($1) }